// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vovanwin/meetingsBot/internal/store/gen/chat"
	"github.com/vovanwin/meetingsBot/internal/store/gen/gather"
	"github.com/vovanwin/meetingsBot/internal/store/gen/membership"
)

// ChatCreate is the builder for creating a Chat entity.
type ChatCreate struct {
	config
	mutation *ChatMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTelegramID sets the "telegram_id" field.
func (cc *ChatCreate) SetTelegramID(i int64) *ChatCreate {
	cc.mutation.SetTelegramID(i)
	return cc
}

// SetTitle sets the "title" field.
func (cc *ChatCreate) SetTitle(s string) *ChatCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cc *ChatCreate) SetNillableTitle(s *string) *ChatCreate {
	if s != nil {
		cc.SetTitle(*s)
	}
	return cc
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (cc *ChatCreate) AddMembershipIDs(ids ...int) *ChatCreate {
	cc.mutation.AddMembershipIDs(ids...)
	return cc
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (cc *ChatCreate) AddMemberships(m ...*Membership) *ChatCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddMembershipIDs(ids...)
}

// AddGatherIDs adds the "gathers" edge to the Gather entity by IDs.
func (cc *ChatCreate) AddGatherIDs(ids ...int) *ChatCreate {
	cc.mutation.AddGatherIDs(ids...)
	return cc
}

// AddGathers adds the "gathers" edges to the Gather entity.
func (cc *ChatCreate) AddGathers(g ...*Gather) *ChatCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cc.AddGatherIDs(ids...)
}

// Mutation returns the ChatMutation object of the builder.
func (cc *ChatCreate) Mutation() *ChatMutation {
	return cc.mutation
}

// Save creates the Chat in the database.
func (cc *ChatCreate) Save(ctx context.Context) (*Chat, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ChatCreate) SaveX(ctx context.Context) *Chat {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ChatCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ChatCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ChatCreate) check() error {
	if _, ok := cc.mutation.TelegramID(); !ok {
		return &ValidationError{Name: "telegram_id", err: errors.New(`gen: missing required field "Chat.telegram_id"`)}
	}
	return nil
}

func (cc *ChatCreate) sqlSave(ctx context.Context) (*Chat, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ChatCreate) createSpec() (*Chat, *sqlgraph.CreateSpec) {
	var (
		_node = &Chat{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(chat.Table, sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.TelegramID(); ok {
		_spec.SetField(chat.FieldTelegramID, field.TypeInt64, value)
		_node.TelegramID = value
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(chat.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if nodes := cc.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.MembershipsTable,
			Columns: []string{chat.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.GathersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.GathersTable,
			Columns: []string{chat.GathersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Chat.Create().
//		SetTelegramID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatUpsert) {
//			SetTelegramID(v+v).
//		}).
//		Exec(ctx)
func (cc *ChatCreate) OnConflict(opts ...sql.ConflictOption) *ChatUpsertOne {
	cc.conflict = opts
	return &ChatUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Chat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ChatCreate) OnConflictColumns(columns ...string) *ChatUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ChatUpsertOne{
		create: cc,
	}
}

type (
	// ChatUpsertOne is the builder for "upsert"-ing
	//  one Chat node.
	ChatUpsertOne struct {
		create *ChatCreate
	}

	// ChatUpsert is the "OnConflict" setter.
	ChatUpsert struct {
		*sql.UpdateSet
	}
)

// SetTelegramID sets the "telegram_id" field.
func (u *ChatUpsert) SetTelegramID(v int64) *ChatUpsert {
	u.Set(chat.FieldTelegramID, v)
	return u
}

// UpdateTelegramID sets the "telegram_id" field to the value that was provided on create.
func (u *ChatUpsert) UpdateTelegramID() *ChatUpsert {
	u.SetExcluded(chat.FieldTelegramID)
	return u
}

// AddTelegramID adds v to the "telegram_id" field.
func (u *ChatUpsert) AddTelegramID(v int64) *ChatUpsert {
	u.Add(chat.FieldTelegramID, v)
	return u
}

// SetTitle sets the "title" field.
func (u *ChatUpsert) SetTitle(v string) *ChatUpsert {
	u.Set(chat.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ChatUpsert) UpdateTitle() *ChatUpsert {
	u.SetExcluded(chat.FieldTitle)
	return u
}

// ClearTitle clears the value of the "title" field.
func (u *ChatUpsert) ClearTitle() *ChatUpsert {
	u.SetNull(chat.FieldTitle)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Chat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChatUpsertOne) UpdateNewValues() *ChatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Chat.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ChatUpsertOne) Ignore() *ChatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatUpsertOne) DoNothing() *ChatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatCreate.OnConflict
// documentation for more info.
func (u *ChatUpsertOne) Update(set func(*ChatUpsert)) *ChatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatUpsert{UpdateSet: update})
	}))
	return u
}

// SetTelegramID sets the "telegram_id" field.
func (u *ChatUpsertOne) SetTelegramID(v int64) *ChatUpsertOne {
	return u.Update(func(s *ChatUpsert) {
		s.SetTelegramID(v)
	})
}

// AddTelegramID adds v to the "telegram_id" field.
func (u *ChatUpsertOne) AddTelegramID(v int64) *ChatUpsertOne {
	return u.Update(func(s *ChatUpsert) {
		s.AddTelegramID(v)
	})
}

// UpdateTelegramID sets the "telegram_id" field to the value that was provided on create.
func (u *ChatUpsertOne) UpdateTelegramID() *ChatUpsertOne {
	return u.Update(func(s *ChatUpsert) {
		s.UpdateTelegramID()
	})
}

// SetTitle sets the "title" field.
func (u *ChatUpsertOne) SetTitle(v string) *ChatUpsertOne {
	return u.Update(func(s *ChatUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ChatUpsertOne) UpdateTitle() *ChatUpsertOne {
	return u.Update(func(s *ChatUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ChatUpsertOne) ClearTitle() *ChatUpsertOne {
	return u.Update(func(s *ChatUpsert) {
		s.ClearTitle()
	})
}

// Exec executes the query.
func (u *ChatUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChatCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ChatUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ChatUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ChatCreateBulk is the builder for creating many Chat entities in bulk.
type ChatCreateBulk struct {
	config
	err      error
	builders []*ChatCreate
	conflict []sql.ConflictOption
}

// Save creates the Chat entities in the database.
func (ccb *ChatCreateBulk) Save(ctx context.Context) ([]*Chat, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Chat, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ChatCreateBulk) SaveX(ctx context.Context) []*Chat {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ChatCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ChatCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Chat.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ChatUpsert) {
//			SetTelegramID(v+v).
//		}).
//		Exec(ctx)
func (ccb *ChatCreateBulk) OnConflict(opts ...sql.ConflictOption) *ChatUpsertBulk {
	ccb.conflict = opts
	return &ChatUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Chat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ChatCreateBulk) OnConflictColumns(columns ...string) *ChatUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ChatUpsertBulk{
		create: ccb,
	}
}

// ChatUpsertBulk is the builder for "upsert"-ing
// a bulk of Chat nodes.
type ChatUpsertBulk struct {
	create *ChatCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Chat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ChatUpsertBulk) UpdateNewValues() *ChatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Chat.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ChatUpsertBulk) Ignore() *ChatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ChatUpsertBulk) DoNothing() *ChatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ChatCreateBulk.OnConflict
// documentation for more info.
func (u *ChatUpsertBulk) Update(set func(*ChatUpsert)) *ChatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ChatUpsert{UpdateSet: update})
	}))
	return u
}

// SetTelegramID sets the "telegram_id" field.
func (u *ChatUpsertBulk) SetTelegramID(v int64) *ChatUpsertBulk {
	return u.Update(func(s *ChatUpsert) {
		s.SetTelegramID(v)
	})
}

// AddTelegramID adds v to the "telegram_id" field.
func (u *ChatUpsertBulk) AddTelegramID(v int64) *ChatUpsertBulk {
	return u.Update(func(s *ChatUpsert) {
		s.AddTelegramID(v)
	})
}

// UpdateTelegramID sets the "telegram_id" field to the value that was provided on create.
func (u *ChatUpsertBulk) UpdateTelegramID() *ChatUpsertBulk {
	return u.Update(func(s *ChatUpsert) {
		s.UpdateTelegramID()
	})
}

// SetTitle sets the "title" field.
func (u *ChatUpsertBulk) SetTitle(v string) *ChatUpsertBulk {
	return u.Update(func(s *ChatUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ChatUpsertBulk) UpdateTitle() *ChatUpsertBulk {
	return u.Update(func(s *ChatUpsert) {
		s.UpdateTitle()
	})
}

// ClearTitle clears the value of the "title" field.
func (u *ChatUpsertBulk) ClearTitle() *ChatUpsertBulk {
	return u.Update(func(s *ChatUpsert) {
		s.ClearTitle()
	})
}

// Exec executes the query.
func (u *ChatUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the ChatCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for ChatCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ChatUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
