// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
)

// Database is the client that holds all ent builders.
type Database struct {
	client *Client
}

// NewDatabase creates a new database based on Client.
func NewDatabase(client *Client) *Database {
	return &Database{client: client}
}

// RunInTx runs the given function f within a transaction.
// Inspired by https://entgo.io/docs/transactions/#best-practices.
// If there is already a transaction in the context, then the method uses it.
func (db *Database) RunInTx(ctx context.Context, f func(context.Context) error) error {
	tx := TxFromContext(ctx)
	if nil == tx {
		var err error
		if tx, err = db.client.Tx(ctx); err != nil {
			return fmt.Errorf("create transaxtion: %v", err)
		}
	}
	var errRollback error
	defer func() {
		if errRollback != nil {
			db.client.log(fmt.Errorf("rollback error: %v", errRollback))
		}
	}()

	defer func() {
		if v := recover(); v != nil {
			errRollback = tx.Rollback()
			panic(v)
		}
	}()
	if err := f(NewTxContext(ctx, tx)); err != nil {
		errRollback = tx.Rollback()
		return fmt.Errorf("run error: %w", err)
	}

	if err := tx.Commit(); err != nil {
		return fmt.Errorf("commit error: %v", err)
	}

	return nil
}

func (db *Database) loadClient(ctx context.Context) *Client {
	tx := TxFromContext(ctx)
	if tx != nil {
		return tx.Client()
	}
	return db.client
}

// Exec executes a query that doesn't return rows. For example, in SQL, INSERT or UPDATE.
func (db *Database) Exec(ctx context.Context, query string, args ...interface{}) (*sql.Result, error) {
	var res sql.Result
	err := db.loadClient(ctx).driver.Exec(ctx, query, args, &res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}

// Query executes a query that returns rows, typically a SELECT in SQL.
func (db *Database) Query(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var rows sql.Rows
	err := db.loadClient(ctx).driver.Query(ctx, query, args, &rows)
	if err != nil {
		return nil, err
	}
	return &rows, nil
}

// Chat is the client for interacting with the Chat builders.
func (db *Database) Chat(ctx context.Context) *ChatClient {
	return db.loadClient(ctx).Chat
}

// Gather is the client for interacting with the Gather builders.
func (db *Database) Gather(ctx context.Context) *GatherClient {
	return db.loadClient(ctx).Gather
}

// Membership is the client for interacting with the Membership builders.
func (db *Database) Membership(ctx context.Context) *MembershipClient {
	return db.loadClient(ctx).Membership
}

// User is the client for interacting with the User builders.
func (db *Database) User(ctx context.Context) *UserClient {
	return db.loadClient(ctx).User
}

// Vote is the client for interacting with the Vote builders.
func (db *Database) Vote(ctx context.Context) *VoteClient {
	return db.loadClient(ctx).Vote
}
