// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vovanwin/meetingsBot/internal/store/gen/chat"
	"github.com/vovanwin/meetingsBot/internal/store/gen/gather"
)

// Gather is the model entity for the Gather schema.
type Gather struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ClosedAt holds the value of the "closed_at" field.
	ClosedAt time.Time `json:"closed_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GatherQuery when eager-loading is set.
	Edges        GatherEdges `json:"edges"`
	chat_gathers *int
	selectValues sql.SelectValues
}

// GatherEdges holds the relations/edges for other nodes in the graph.
type GatherEdges struct {
	// Chat holds the value of the chat edge.
	Chat *Chat `json:"chat,omitempty"`
	// Votes holds the value of the votes edge.
	Votes []*Vote `json:"votes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChatOrErr returns the Chat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GatherEdges) ChatOrErr() (*Chat, error) {
	if e.Chat != nil {
		return e.Chat, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: chat.Label}
	}
	return nil, &NotLoadedError{edge: "chat"}
}

// VotesOrErr returns the Votes value or an error if the edge
// was not loaded in eager-loading.
func (e GatherEdges) VotesOrErr() ([]*Vote, error) {
	if e.loadedTypes[1] {
		return e.Votes, nil
	}
	return nil, &NotLoadedError{edge: "votes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Gather) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gather.FieldActive:
			values[i] = new(sql.NullBool)
		case gather.FieldID:
			values[i] = new(sql.NullInt64)
		case gather.FieldCreatedAt, gather.FieldClosedAt:
			values[i] = new(sql.NullTime)
		case gather.ForeignKeys[0]: // chat_gathers
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Gather fields.
func (ga *Gather) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gather.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case gather.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				ga.Active = value.Bool
			}
		case gather.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		case gather.FieldClosedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closed_at", values[i])
			} else if value.Valid {
				ga.ClosedAt = value.Time
			}
		case gather.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chat_gathers", value)
			} else if value.Valid {
				ga.chat_gathers = new(int)
				*ga.chat_gathers = int(value.Int64)
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Gather.
// This includes values selected through modifiers, order, etc.
func (ga *Gather) Value(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// QueryChat queries the "chat" edge of the Gather entity.
func (ga *Gather) QueryChat() *ChatQuery {
	return NewGatherClient(ga.config).QueryChat(ga)
}

// QueryVotes queries the "votes" edge of the Gather entity.
func (ga *Gather) QueryVotes() *VoteQuery {
	return NewGatherClient(ga.config).QueryVotes(ga)
}

// Update returns a builder for updating this Gather.
// Note that you need to call Gather.Unwrap() before calling this method if this Gather
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Gather) Update() *GatherUpdateOne {
	return NewGatherClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the Gather entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Gather) Unwrap() *Gather {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("gen: Gather is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Gather) String() string {
	var builder strings.Builder
	builder.WriteString("Gather(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", ga.Active))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ga.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("closed_at=")
	builder.WriteString(ga.ClosedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Gathers is a parsable slice of Gather.
type Gathers []*Gather
