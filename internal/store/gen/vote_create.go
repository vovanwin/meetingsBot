// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vovanwin/meetingsBot/internal/store/gen/gather"
	"github.com/vovanwin/meetingsBot/internal/store/gen/user"
	"github.com/vovanwin/meetingsBot/internal/store/gen/vote"
)

// VoteCreate is the builder for creating a Vote entity.
type VoteCreate struct {
	config
	mutation *VoteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCount sets the "count" field.
func (vc *VoteCreate) SetCount(i int) *VoteCreate {
	vc.mutation.SetCount(i)
	return vc
}

// SetVotedAt sets the "voted_at" field.
func (vc *VoteCreate) SetVotedAt(t time.Time) *VoteCreate {
	vc.mutation.SetVotedAt(t)
	return vc
}

// SetNillableVotedAt sets the "voted_at" field if the given value is not nil.
func (vc *VoteCreate) SetNillableVotedAt(t *time.Time) *VoteCreate {
	if t != nil {
		vc.SetVotedAt(*t)
	}
	return vc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (vc *VoteCreate) SetUserID(id int) *VoteCreate {
	vc.mutation.SetUserID(id)
	return vc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (vc *VoteCreate) SetNillableUserID(id *int) *VoteCreate {
	if id != nil {
		vc = vc.SetUserID(*id)
	}
	return vc
}

// SetUser sets the "user" edge to the User entity.
func (vc *VoteCreate) SetUser(u *User) *VoteCreate {
	return vc.SetUserID(u.ID)
}

// SetGatherID sets the "gather" edge to the Gather entity by ID.
func (vc *VoteCreate) SetGatherID(id int) *VoteCreate {
	vc.mutation.SetGatherID(id)
	return vc
}

// SetNillableGatherID sets the "gather" edge to the Gather entity by ID if the given value is not nil.
func (vc *VoteCreate) SetNillableGatherID(id *int) *VoteCreate {
	if id != nil {
		vc = vc.SetGatherID(*id)
	}
	return vc
}

// SetGather sets the "gather" edge to the Gather entity.
func (vc *VoteCreate) SetGather(g *Gather) *VoteCreate {
	return vc.SetGatherID(g.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (vc *VoteCreate) Mutation() *VoteMutation {
	return vc.mutation
}

// Save creates the Vote in the database.
func (vc *VoteCreate) Save(ctx context.Context) (*Vote, error) {
	vc.defaults()
	return withHooks(ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VoteCreate) SaveX(ctx context.Context) *Vote {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VoteCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VoteCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VoteCreate) defaults() {
	if _, ok := vc.mutation.VotedAt(); !ok {
		v := vote.DefaultVotedAt()
		vc.mutation.SetVotedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VoteCreate) check() error {
	if _, ok := vc.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`gen: missing required field "Vote.count"`)}
	}
	if v, ok := vc.mutation.Count(); ok {
		if err := vote.CountValidator(v); err != nil {
			return &ValidationError{Name: "count", err: fmt.Errorf(`gen: validator failed for field "Vote.count": %w`, err)}
		}
	}
	if _, ok := vc.mutation.VotedAt(); !ok {
		return &ValidationError{Name: "voted_at", err: errors.New(`gen: missing required field "Vote.voted_at"`)}
	}
	return nil
}

func (vc *VoteCreate) sqlSave(ctx context.Context) (*Vote, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VoteCreate) createSpec() (*Vote, *sqlgraph.CreateSpec) {
	var (
		_node = &Vote{config: vc.config}
		_spec = sqlgraph.NewCreateSpec(vote.Table, sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt))
	)
	_spec.OnConflict = vc.conflict
	if value, ok := vc.mutation.Count(); ok {
		_spec.SetField(vote.FieldCount, field.TypeInt, value)
		_node.Count = value
	}
	if value, ok := vc.mutation.VotedAt(); ok {
		_spec.SetField(vote.FieldVotedAt, field.TypeTime, value)
		_node.VotedAt = value
	}
	if nodes := vc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.UserTable,
			Columns: []string{vote.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_votes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.GatherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.GatherTable,
			Columns: []string{vote.GatherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.gather_votes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vote.Create().
//		SetCount(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VoteUpsert) {
//			SetCount(v+v).
//		}).
//		Exec(ctx)
func (vc *VoteCreate) OnConflict(opts ...sql.ConflictOption) *VoteUpsertOne {
	vc.conflict = opts
	return &VoteUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vc *VoteCreate) OnConflictColumns(columns ...string) *VoteUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VoteUpsertOne{
		create: vc,
	}
}

type (
	// VoteUpsertOne is the builder for "upsert"-ing
	//  one Vote node.
	VoteUpsertOne struct {
		create *VoteCreate
	}

	// VoteUpsert is the "OnConflict" setter.
	VoteUpsert struct {
		*sql.UpdateSet
	}
)

// SetCount sets the "count" field.
func (u *VoteUpsert) SetCount(v int) *VoteUpsert {
	u.Set(vote.FieldCount, v)
	return u
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *VoteUpsert) UpdateCount() *VoteUpsert {
	u.SetExcluded(vote.FieldCount)
	return u
}

// AddCount adds v to the "count" field.
func (u *VoteUpsert) AddCount(v int) *VoteUpsert {
	u.Add(vote.FieldCount, v)
	return u
}

// SetVotedAt sets the "voted_at" field.
func (u *VoteUpsert) SetVotedAt(v time.Time) *VoteUpsert {
	u.Set(vote.FieldVotedAt, v)
	return u
}

// UpdateVotedAt sets the "voted_at" field to the value that was provided on create.
func (u *VoteUpsert) UpdateVotedAt() *VoteUpsert {
	u.SetExcluded(vote.FieldVotedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VoteUpsertOne) UpdateNewValues() *VoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vote.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *VoteUpsertOne) Ignore() *VoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VoteUpsertOne) DoNothing() *VoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VoteCreate.OnConflict
// documentation for more info.
func (u *VoteUpsertOne) Update(set func(*VoteUpsert)) *VoteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetCount sets the "count" field.
func (u *VoteUpsertOne) SetCount(v int) *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *VoteUpsertOne) AddCount(v int) *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *VoteUpsertOne) UpdateCount() *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateCount()
	})
}

// SetVotedAt sets the "voted_at" field.
func (u *VoteUpsertOne) SetVotedAt(v time.Time) *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.SetVotedAt(v)
	})
}

// UpdateVotedAt sets the "voted_at" field to the value that was provided on create.
func (u *VoteUpsertOne) UpdateVotedAt() *VoteUpsertOne {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateVotedAt()
	})
}

// Exec executes the query.
func (u *VoteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for VoteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VoteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VoteUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VoteUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VoteCreateBulk is the builder for creating many Vote entities in bulk.
type VoteCreateBulk struct {
	config
	err      error
	builders []*VoteCreate
	conflict []sql.ConflictOption
}

// Save creates the Vote entities in the database.
func (vcb *VoteCreateBulk) Save(ctx context.Context) ([]*Vote, error) {
	if vcb.err != nil {
		return nil, vcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vote, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VoteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VoteCreateBulk) SaveX(ctx context.Context) []*Vote {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VoteCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VoteCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vote.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VoteUpsert) {
//			SetCount(v+v).
//		}).
//		Exec(ctx)
func (vcb *VoteCreateBulk) OnConflict(opts ...sql.ConflictOption) *VoteUpsertBulk {
	vcb.conflict = opts
	return &VoteUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (vcb *VoteCreateBulk) OnConflictColumns(columns ...string) *VoteUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VoteUpsertBulk{
		create: vcb,
	}
}

// VoteUpsertBulk is the builder for "upsert"-ing
// a bulk of Vote nodes.
type VoteUpsertBulk struct {
	create *VoteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *VoteUpsertBulk) UpdateNewValues() *VoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vote.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *VoteUpsertBulk) Ignore() *VoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VoteUpsertBulk) DoNothing() *VoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VoteCreateBulk.OnConflict
// documentation for more info.
func (u *VoteUpsertBulk) Update(set func(*VoteUpsert)) *VoteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VoteUpsert{UpdateSet: update})
	}))
	return u
}

// SetCount sets the "count" field.
func (u *VoteUpsertBulk) SetCount(v int) *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.SetCount(v)
	})
}

// AddCount adds v to the "count" field.
func (u *VoteUpsertBulk) AddCount(v int) *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.AddCount(v)
	})
}

// UpdateCount sets the "count" field to the value that was provided on create.
func (u *VoteUpsertBulk) UpdateCount() *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateCount()
	})
}

// SetVotedAt sets the "voted_at" field.
func (u *VoteUpsertBulk) SetVotedAt(v time.Time) *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.SetVotedAt(v)
	})
}

// UpdateVotedAt sets the "voted_at" field to the value that was provided on create.
func (u *VoteUpsertBulk) UpdateVotedAt() *VoteUpsertBulk {
	return u.Update(func(s *VoteUpsert) {
		s.UpdateVotedAt()
	})
}

// Exec executes the query.
func (u *VoteUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the VoteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for VoteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VoteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
