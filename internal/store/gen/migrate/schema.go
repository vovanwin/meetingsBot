// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ChatsColumns holds the columns for the "chats" table.
	ChatsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "telegram_id", Type: field.TypeInt64, Unique: true},
		{Name: "title", Type: field.TypeString, Nullable: true},
	}
	// ChatsTable holds the schema information for the "chats" table.
	ChatsTable = &schema.Table{
		Name:       "chats",
		Columns:    ChatsColumns,
		PrimaryKey: []*schema.Column{ChatsColumns[0]},
	}
	// GathersColumns holds the columns for the "gathers" table.
	GathersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "active", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "closed_at", Type: field.TypeTime, Nullable: true},
		{Name: "chat_gathers", Type: field.TypeInt, Nullable: true},
	}
	// GathersTable holds the schema information for the "gathers" table.
	GathersTable = &schema.Table{
		Name:       "gathers",
		Columns:    GathersColumns,
		PrimaryKey: []*schema.Column{GathersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "gathers_chats_gathers",
				Columns:    []*schema.Column{GathersColumns[4]},
				RefColumns: []*schema.Column{ChatsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MembershipsColumns holds the columns for the "memberships" table.
	MembershipsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "is_admin", Type: field.TypeBool, Default: false},
		{Name: "chat_memberships", Type: field.TypeInt, Nullable: true},
		{Name: "user_memberships", Type: field.TypeInt, Nullable: true},
	}
	// MembershipsTable holds the schema information for the "memberships" table.
	MembershipsTable = &schema.Table{
		Name:       "memberships",
		Columns:    MembershipsColumns,
		PrimaryKey: []*schema.Column{MembershipsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "memberships_chats_memberships",
				Columns:    []*schema.Column{MembershipsColumns[2]},
				RefColumns: []*schema.Column{ChatsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "memberships_users_memberships",
				Columns:    []*schema.Column{MembershipsColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "telegram_id", Type: field.TypeInt64, Unique: true},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "first_name", Type: field.TypeString, Nullable: true},
		{Name: "last_name", Type: field.TypeString, Nullable: true},
		{Name: "is_owner", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// VotesColumns holds the columns for the "votes" table.
	VotesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "count", Type: field.TypeInt},
		{Name: "voted_at", Type: field.TypeTime},
		{Name: "gather_votes", Type: field.TypeInt, Nullable: true},
		{Name: "user_votes", Type: field.TypeInt, Nullable: true},
	}
	// VotesTable holds the schema information for the "votes" table.
	VotesTable = &schema.Table{
		Name:       "votes",
		Columns:    VotesColumns,
		PrimaryKey: []*schema.Column{VotesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "votes_gathers_votes",
				Columns:    []*schema.Column{VotesColumns[3]},
				RefColumns: []*schema.Column{GathersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "votes_users_votes",
				Columns:    []*schema.Column{VotesColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ChatsTable,
		GathersTable,
		MembershipsTable,
		UsersTable,
		VotesTable,
	}
)

func init() {
	GathersTable.ForeignKeys[0].RefTable = ChatsTable
	MembershipsTable.ForeignKeys[0].RefTable = ChatsTable
	MembershipsTable.ForeignKeys[1].RefTable = UsersTable
	VotesTable.ForeignKeys[0].RefTable = GathersTable
	VotesTable.ForeignKeys[1].RefTable = UsersTable
}
