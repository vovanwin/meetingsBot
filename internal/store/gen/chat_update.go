// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vovanwin/meetingsBot/internal/store/gen/chat"
	"github.com/vovanwin/meetingsBot/internal/store/gen/gather"
	"github.com/vovanwin/meetingsBot/internal/store/gen/membership"
	"github.com/vovanwin/meetingsBot/internal/store/gen/predicate"
)

// ChatUpdate is the builder for updating Chat entities.
type ChatUpdate struct {
	config
	hooks    []Hook
	mutation *ChatMutation
}

// Where appends a list predicates to the ChatUpdate builder.
func (cu *ChatUpdate) Where(ps ...predicate.Chat) *ChatUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTelegramID sets the "telegram_id" field.
func (cu *ChatUpdate) SetTelegramID(i int64) *ChatUpdate {
	cu.mutation.ResetTelegramID()
	cu.mutation.SetTelegramID(i)
	return cu
}

// SetNillableTelegramID sets the "telegram_id" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableTelegramID(i *int64) *ChatUpdate {
	if i != nil {
		cu.SetTelegramID(*i)
	}
	return cu
}

// AddTelegramID adds i to the "telegram_id" field.
func (cu *ChatUpdate) AddTelegramID(i int64) *ChatUpdate {
	cu.mutation.AddTelegramID(i)
	return cu
}

// SetTitle sets the "title" field.
func (cu *ChatUpdate) SetTitle(s string) *ChatUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *ChatUpdate) SetNillableTitle(s *string) *ChatUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// ClearTitle clears the value of the "title" field.
func (cu *ChatUpdate) ClearTitle() *ChatUpdate {
	cu.mutation.ClearTitle()
	return cu
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (cu *ChatUpdate) AddMembershipIDs(ids ...int) *ChatUpdate {
	cu.mutation.AddMembershipIDs(ids...)
	return cu
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (cu *ChatUpdate) AddMemberships(m ...*Membership) *ChatUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMembershipIDs(ids...)
}

// AddGatherIDs adds the "gathers" edge to the Gather entity by IDs.
func (cu *ChatUpdate) AddGatherIDs(ids ...int) *ChatUpdate {
	cu.mutation.AddGatherIDs(ids...)
	return cu
}

// AddGathers adds the "gathers" edges to the Gather entity.
func (cu *ChatUpdate) AddGathers(g ...*Gather) *ChatUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.AddGatherIDs(ids...)
}

// Mutation returns the ChatMutation object of the builder.
func (cu *ChatUpdate) Mutation() *ChatMutation {
	return cu.mutation
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (cu *ChatUpdate) ClearMemberships() *ChatUpdate {
	cu.mutation.ClearMemberships()
	return cu
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (cu *ChatUpdate) RemoveMembershipIDs(ids ...int) *ChatUpdate {
	cu.mutation.RemoveMembershipIDs(ids...)
	return cu
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (cu *ChatUpdate) RemoveMemberships(m ...*Membership) *ChatUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMembershipIDs(ids...)
}

// ClearGathers clears all "gathers" edges to the Gather entity.
func (cu *ChatUpdate) ClearGathers() *ChatUpdate {
	cu.mutation.ClearGathers()
	return cu
}

// RemoveGatherIDs removes the "gathers" edge to Gather entities by IDs.
func (cu *ChatUpdate) RemoveGatherIDs(ids ...int) *ChatUpdate {
	cu.mutation.RemoveGatherIDs(ids...)
	return cu
}

// RemoveGathers removes "gathers" edges to Gather entities.
func (cu *ChatUpdate) RemoveGathers(g ...*Gather) *ChatUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cu.RemoveGatherIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChatUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChatUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChatUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ChatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chat.Table, chat.Columns, sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.TelegramID(); ok {
		_spec.SetField(chat.FieldTelegramID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedTelegramID(); ok {
		_spec.AddField(chat.FieldTelegramID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(chat.FieldTitle, field.TypeString, value)
	}
	if cu.mutation.TitleCleared() {
		_spec.ClearField(chat.FieldTitle, field.TypeString)
	}
	if cu.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.MembershipsTable,
			Columns: []string{chat.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !cu.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.MembershipsTable,
			Columns: []string{chat.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.MembershipsTable,
			Columns: []string{chat.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.GathersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.GathersTable,
			Columns: []string{chat.GathersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedGathersIDs(); len(nodes) > 0 && !cu.mutation.GathersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.GathersTable,
			Columns: []string{chat.GathersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.GathersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.GathersTable,
			Columns: []string{chat.GathersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChatUpdateOne is the builder for updating a single Chat entity.
type ChatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatMutation
}

// SetTelegramID sets the "telegram_id" field.
func (cuo *ChatUpdateOne) SetTelegramID(i int64) *ChatUpdateOne {
	cuo.mutation.ResetTelegramID()
	cuo.mutation.SetTelegramID(i)
	return cuo
}

// SetNillableTelegramID sets the "telegram_id" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableTelegramID(i *int64) *ChatUpdateOne {
	if i != nil {
		cuo.SetTelegramID(*i)
	}
	return cuo
}

// AddTelegramID adds i to the "telegram_id" field.
func (cuo *ChatUpdateOne) AddTelegramID(i int64) *ChatUpdateOne {
	cuo.mutation.AddTelegramID(i)
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *ChatUpdateOne) SetTitle(s string) *ChatUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableTitle(s *string) *ChatUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// ClearTitle clears the value of the "title" field.
func (cuo *ChatUpdateOne) ClearTitle() *ChatUpdateOne {
	cuo.mutation.ClearTitle()
	return cuo
}

// AddMembershipIDs adds the "memberships" edge to the Membership entity by IDs.
func (cuo *ChatUpdateOne) AddMembershipIDs(ids ...int) *ChatUpdateOne {
	cuo.mutation.AddMembershipIDs(ids...)
	return cuo
}

// AddMemberships adds the "memberships" edges to the Membership entity.
func (cuo *ChatUpdateOne) AddMemberships(m ...*Membership) *ChatUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMembershipIDs(ids...)
}

// AddGatherIDs adds the "gathers" edge to the Gather entity by IDs.
func (cuo *ChatUpdateOne) AddGatherIDs(ids ...int) *ChatUpdateOne {
	cuo.mutation.AddGatherIDs(ids...)
	return cuo
}

// AddGathers adds the "gathers" edges to the Gather entity.
func (cuo *ChatUpdateOne) AddGathers(g ...*Gather) *ChatUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.AddGatherIDs(ids...)
}

// Mutation returns the ChatMutation object of the builder.
func (cuo *ChatUpdateOne) Mutation() *ChatMutation {
	return cuo.mutation
}

// ClearMemberships clears all "memberships" edges to the Membership entity.
func (cuo *ChatUpdateOne) ClearMemberships() *ChatUpdateOne {
	cuo.mutation.ClearMemberships()
	return cuo
}

// RemoveMembershipIDs removes the "memberships" edge to Membership entities by IDs.
func (cuo *ChatUpdateOne) RemoveMembershipIDs(ids ...int) *ChatUpdateOne {
	cuo.mutation.RemoveMembershipIDs(ids...)
	return cuo
}

// RemoveMemberships removes "memberships" edges to Membership entities.
func (cuo *ChatUpdateOne) RemoveMemberships(m ...*Membership) *ChatUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMembershipIDs(ids...)
}

// ClearGathers clears all "gathers" edges to the Gather entity.
func (cuo *ChatUpdateOne) ClearGathers() *ChatUpdateOne {
	cuo.mutation.ClearGathers()
	return cuo
}

// RemoveGatherIDs removes the "gathers" edge to Gather entities by IDs.
func (cuo *ChatUpdateOne) RemoveGatherIDs(ids ...int) *ChatUpdateOne {
	cuo.mutation.RemoveGatherIDs(ids...)
	return cuo
}

// RemoveGathers removes "gathers" edges to Gather entities.
func (cuo *ChatUpdateOne) RemoveGathers(g ...*Gather) *ChatUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return cuo.RemoveGatherIDs(ids...)
}

// Where appends a list predicates to the ChatUpdate builder.
func (cuo *ChatUpdateOne) Where(ps ...predicate.Chat) *ChatUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChatUpdateOne) Select(field string, fields ...string) *ChatUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chat entity.
func (cuo *ChatUpdateOne) Save(ctx context.Context) (*Chat, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChatUpdateOne) SaveX(ctx context.Context) *Chat {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChatUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChatUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ChatUpdateOne) sqlSave(ctx context.Context) (_node *Chat, err error) {
	_spec := sqlgraph.NewUpdateSpec(chat.Table, chat.Columns, sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Chat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chat.FieldID)
		for _, f := range fields {
			if !chat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != chat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.TelegramID(); ok {
		_spec.SetField(chat.FieldTelegramID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedTelegramID(); ok {
		_spec.AddField(chat.FieldTelegramID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(chat.FieldTitle, field.TypeString, value)
	}
	if cuo.mutation.TitleCleared() {
		_spec.ClearField(chat.FieldTitle, field.TypeString)
	}
	if cuo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.MembershipsTable,
			Columns: []string{chat.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMembershipsIDs(); len(nodes) > 0 && !cuo.mutation.MembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.MembershipsTable,
			Columns: []string{chat.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.MembershipsTable,
			Columns: []string{chat.MembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.GathersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.GathersTable,
			Columns: []string{chat.GathersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedGathersIDs(); len(nodes) > 0 && !cuo.mutation.GathersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.GathersTable,
			Columns: []string{chat.GathersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.GathersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   chat.GathersTable,
			Columns: []string{chat.GathersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chat{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
