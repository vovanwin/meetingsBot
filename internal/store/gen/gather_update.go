// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vovanwin/meetingsBot/internal/store/gen/chat"
	"github.com/vovanwin/meetingsBot/internal/store/gen/gather"
	"github.com/vovanwin/meetingsBot/internal/store/gen/predicate"
	"github.com/vovanwin/meetingsBot/internal/store/gen/vote"
)

// GatherUpdate is the builder for updating Gather entities.
type GatherUpdate struct {
	config
	hooks    []Hook
	mutation *GatherMutation
}

// Where appends a list predicates to the GatherUpdate builder.
func (gu *GatherUpdate) Where(ps ...predicate.Gather) *GatherUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetActive sets the "active" field.
func (gu *GatherUpdate) SetActive(b bool) *GatherUpdate {
	gu.mutation.SetActive(b)
	return gu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (gu *GatherUpdate) SetNillableActive(b *bool) *GatherUpdate {
	if b != nil {
		gu.SetActive(*b)
	}
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GatherUpdate) SetCreatedAt(t time.Time) *GatherUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GatherUpdate) SetNillableCreatedAt(t *time.Time) *GatherUpdate {
	if t != nil {
		gu.SetCreatedAt(*t)
	}
	return gu
}

// SetClosedAt sets the "closed_at" field.
func (gu *GatherUpdate) SetClosedAt(t time.Time) *GatherUpdate {
	gu.mutation.SetClosedAt(t)
	return gu
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (gu *GatherUpdate) SetNillableClosedAt(t *time.Time) *GatherUpdate {
	if t != nil {
		gu.SetClosedAt(*t)
	}
	return gu
}

// ClearClosedAt clears the value of the "closed_at" field.
func (gu *GatherUpdate) ClearClosedAt() *GatherUpdate {
	gu.mutation.ClearClosedAt()
	return gu
}

// SetChatID sets the "chat" edge to the Chat entity by ID.
func (gu *GatherUpdate) SetChatID(id int) *GatherUpdate {
	gu.mutation.SetChatID(id)
	return gu
}

// SetNillableChatID sets the "chat" edge to the Chat entity by ID if the given value is not nil.
func (gu *GatherUpdate) SetNillableChatID(id *int) *GatherUpdate {
	if id != nil {
		gu = gu.SetChatID(*id)
	}
	return gu
}

// SetChat sets the "chat" edge to the Chat entity.
func (gu *GatherUpdate) SetChat(c *Chat) *GatherUpdate {
	return gu.SetChatID(c.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (gu *GatherUpdate) AddVoteIDs(ids ...int) *GatherUpdate {
	gu.mutation.AddVoteIDs(ids...)
	return gu
}

// AddVotes adds the "votes" edges to the Vote entity.
func (gu *GatherUpdate) AddVotes(v ...*Vote) *GatherUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return gu.AddVoteIDs(ids...)
}

// Mutation returns the GatherMutation object of the builder.
func (gu *GatherUpdate) Mutation() *GatherMutation {
	return gu.mutation
}

// ClearChat clears the "chat" edge to the Chat entity.
func (gu *GatherUpdate) ClearChat() *GatherUpdate {
	gu.mutation.ClearChat()
	return gu
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (gu *GatherUpdate) ClearVotes() *GatherUpdate {
	gu.mutation.ClearVotes()
	return gu
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (gu *GatherUpdate) RemoveVoteIDs(ids ...int) *GatherUpdate {
	gu.mutation.RemoveVoteIDs(ids...)
	return gu
}

// RemoveVotes removes "votes" edges to Vote entities.
func (gu *GatherUpdate) RemoveVotes(v ...*Vote) *GatherUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return gu.RemoveVoteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GatherUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GatherUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GatherUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GatherUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GatherUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(gather.Table, gather.Columns, sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Active(); ok {
		_spec.SetField(gather.FieldActive, field.TypeBool, value)
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(gather.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.ClosedAt(); ok {
		_spec.SetField(gather.FieldClosedAt, field.TypeTime, value)
	}
	if gu.mutation.ClosedAtCleared() {
		_spec.ClearField(gather.FieldClosedAt, field.TypeTime)
	}
	if gu.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gather.ChatTable,
			Columns: []string{gather.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gather.ChatTable,
			Columns: []string{gather.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gather.VotesTable,
			Columns: []string{gather.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedVotesIDs(); len(nodes) > 0 && !gu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gather.VotesTable,
			Columns: []string{gather.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gather.VotesTable,
			Columns: []string{gather.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gather.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GatherUpdateOne is the builder for updating a single Gather entity.
type GatherUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GatherMutation
}

// SetActive sets the "active" field.
func (guo *GatherUpdateOne) SetActive(b bool) *GatherUpdateOne {
	guo.mutation.SetActive(b)
	return guo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (guo *GatherUpdateOne) SetNillableActive(b *bool) *GatherUpdateOne {
	if b != nil {
		guo.SetActive(*b)
	}
	return guo
}

// SetCreatedAt sets the "created_at" field.
func (guo *GatherUpdateOne) SetCreatedAt(t time.Time) *GatherUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GatherUpdateOne) SetNillableCreatedAt(t *time.Time) *GatherUpdateOne {
	if t != nil {
		guo.SetCreatedAt(*t)
	}
	return guo
}

// SetClosedAt sets the "closed_at" field.
func (guo *GatherUpdateOne) SetClosedAt(t time.Time) *GatherUpdateOne {
	guo.mutation.SetClosedAt(t)
	return guo
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (guo *GatherUpdateOne) SetNillableClosedAt(t *time.Time) *GatherUpdateOne {
	if t != nil {
		guo.SetClosedAt(*t)
	}
	return guo
}

// ClearClosedAt clears the value of the "closed_at" field.
func (guo *GatherUpdateOne) ClearClosedAt() *GatherUpdateOne {
	guo.mutation.ClearClosedAt()
	return guo
}

// SetChatID sets the "chat" edge to the Chat entity by ID.
func (guo *GatherUpdateOne) SetChatID(id int) *GatherUpdateOne {
	guo.mutation.SetChatID(id)
	return guo
}

// SetNillableChatID sets the "chat" edge to the Chat entity by ID if the given value is not nil.
func (guo *GatherUpdateOne) SetNillableChatID(id *int) *GatherUpdateOne {
	if id != nil {
		guo = guo.SetChatID(*id)
	}
	return guo
}

// SetChat sets the "chat" edge to the Chat entity.
func (guo *GatherUpdateOne) SetChat(c *Chat) *GatherUpdateOne {
	return guo.SetChatID(c.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (guo *GatherUpdateOne) AddVoteIDs(ids ...int) *GatherUpdateOne {
	guo.mutation.AddVoteIDs(ids...)
	return guo
}

// AddVotes adds the "votes" edges to the Vote entity.
func (guo *GatherUpdateOne) AddVotes(v ...*Vote) *GatherUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return guo.AddVoteIDs(ids...)
}

// Mutation returns the GatherMutation object of the builder.
func (guo *GatherUpdateOne) Mutation() *GatherMutation {
	return guo.mutation
}

// ClearChat clears the "chat" edge to the Chat entity.
func (guo *GatherUpdateOne) ClearChat() *GatherUpdateOne {
	guo.mutation.ClearChat()
	return guo
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (guo *GatherUpdateOne) ClearVotes() *GatherUpdateOne {
	guo.mutation.ClearVotes()
	return guo
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (guo *GatherUpdateOne) RemoveVoteIDs(ids ...int) *GatherUpdateOne {
	guo.mutation.RemoveVoteIDs(ids...)
	return guo
}

// RemoveVotes removes "votes" edges to Vote entities.
func (guo *GatherUpdateOne) RemoveVotes(v ...*Vote) *GatherUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return guo.RemoveVoteIDs(ids...)
}

// Where appends a list predicates to the GatherUpdate builder.
func (guo *GatherUpdateOne) Where(ps ...predicate.Gather) *GatherUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GatherUpdateOne) Select(field string, fields ...string) *GatherUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Gather entity.
func (guo *GatherUpdateOne) Save(ctx context.Context) (*Gather, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GatherUpdateOne) SaveX(ctx context.Context) *Gather {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GatherUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GatherUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GatherUpdateOne) sqlSave(ctx context.Context) (_node *Gather, err error) {
	_spec := sqlgraph.NewUpdateSpec(gather.Table, gather.Columns, sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Gather.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gather.FieldID)
		for _, f := range fields {
			if !gather.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != gather.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Active(); ok {
		_spec.SetField(gather.FieldActive, field.TypeBool, value)
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(gather.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.ClosedAt(); ok {
		_spec.SetField(gather.FieldClosedAt, field.TypeTime, value)
	}
	if guo.mutation.ClosedAtCleared() {
		_spec.ClearField(gather.FieldClosedAt, field.TypeTime)
	}
	if guo.mutation.ChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gather.ChatTable,
			Columns: []string{gather.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gather.ChatTable,
			Columns: []string{gather.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gather.VotesTable,
			Columns: []string{gather.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedVotesIDs(); len(nodes) > 0 && !guo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gather.VotesTable,
			Columns: []string{gather.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gather.VotesTable,
			Columns: []string{gather.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Gather{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gather.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
