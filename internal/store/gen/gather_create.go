// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vovanwin/meetingsBot/internal/store/gen/chat"
	"github.com/vovanwin/meetingsBot/internal/store/gen/gather"
	"github.com/vovanwin/meetingsBot/internal/store/gen/vote"
)

// GatherCreate is the builder for creating a Gather entity.
type GatherCreate struct {
	config
	mutation *GatherMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetActive sets the "active" field.
func (gc *GatherCreate) SetActive(b bool) *GatherCreate {
	gc.mutation.SetActive(b)
	return gc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (gc *GatherCreate) SetNillableActive(b *bool) *GatherCreate {
	if b != nil {
		gc.SetActive(*b)
	}
	return gc
}

// SetCreatedAt sets the "created_at" field.
func (gc *GatherCreate) SetCreatedAt(t time.Time) *GatherCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GatherCreate) SetNillableCreatedAt(t *time.Time) *GatherCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetClosedAt sets the "closed_at" field.
func (gc *GatherCreate) SetClosedAt(t time.Time) *GatherCreate {
	gc.mutation.SetClosedAt(t)
	return gc
}

// SetNillableClosedAt sets the "closed_at" field if the given value is not nil.
func (gc *GatherCreate) SetNillableClosedAt(t *time.Time) *GatherCreate {
	if t != nil {
		gc.SetClosedAt(*t)
	}
	return gc
}

// SetChatID sets the "chat" edge to the Chat entity by ID.
func (gc *GatherCreate) SetChatID(id int) *GatherCreate {
	gc.mutation.SetChatID(id)
	return gc
}

// SetNillableChatID sets the "chat" edge to the Chat entity by ID if the given value is not nil.
func (gc *GatherCreate) SetNillableChatID(id *int) *GatherCreate {
	if id != nil {
		gc = gc.SetChatID(*id)
	}
	return gc
}

// SetChat sets the "chat" edge to the Chat entity.
func (gc *GatherCreate) SetChat(c *Chat) *GatherCreate {
	return gc.SetChatID(c.ID)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (gc *GatherCreate) AddVoteIDs(ids ...int) *GatherCreate {
	gc.mutation.AddVoteIDs(ids...)
	return gc
}

// AddVotes adds the "votes" edges to the Vote entity.
func (gc *GatherCreate) AddVotes(v ...*Vote) *GatherCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return gc.AddVoteIDs(ids...)
}

// Mutation returns the GatherMutation object of the builder.
func (gc *GatherCreate) Mutation() *GatherMutation {
	return gc.mutation
}

// Save creates the Gather in the database.
func (gc *GatherCreate) Save(ctx context.Context) (*Gather, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GatherCreate) SaveX(ctx context.Context) *Gather {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GatherCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GatherCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GatherCreate) defaults() {
	if _, ok := gc.mutation.Active(); !ok {
		v := gather.DefaultActive
		gc.mutation.SetActive(v)
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := gather.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GatherCreate) check() error {
	if _, ok := gc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`gen: missing required field "Gather.active"`)}
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Gather.created_at"`)}
	}
	return nil
}

func (gc *GatherCreate) sqlSave(ctx context.Context) (*Gather, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GatherCreate) createSpec() (*Gather, *sqlgraph.CreateSpec) {
	var (
		_node = &Gather{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(gather.Table, sqlgraph.NewFieldSpec(gather.FieldID, field.TypeInt))
	)
	_spec.OnConflict = gc.conflict
	if value, ok := gc.mutation.Active(); ok {
		_spec.SetField(gather.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(gather.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.ClosedAt(); ok {
		_spec.SetField(gather.FieldClosedAt, field.TypeTime, value)
		_node.ClosedAt = value
	}
	if nodes := gc.mutation.ChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gather.ChatTable,
			Columns: []string{gather.ChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.chat_gathers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gather.VotesTable,
			Columns: []string{gather.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(vote.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Gather.Create().
//		SetActive(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GatherUpsert) {
//			SetActive(v+v).
//		}).
//		Exec(ctx)
func (gc *GatherCreate) OnConflict(opts ...sql.ConflictOption) *GatherUpsertOne {
	gc.conflict = opts
	return &GatherUpsertOne{
		create: gc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Gather.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gc *GatherCreate) OnConflictColumns(columns ...string) *GatherUpsertOne {
	gc.conflict = append(gc.conflict, sql.ConflictColumns(columns...))
	return &GatherUpsertOne{
		create: gc,
	}
}

type (
	// GatherUpsertOne is the builder for "upsert"-ing
	//  one Gather node.
	GatherUpsertOne struct {
		create *GatherCreate
	}

	// GatherUpsert is the "OnConflict" setter.
	GatherUpsert struct {
		*sql.UpdateSet
	}
)

// SetActive sets the "active" field.
func (u *GatherUpsert) SetActive(v bool) *GatherUpsert {
	u.Set(gather.FieldActive, v)
	return u
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *GatherUpsert) UpdateActive() *GatherUpsert {
	u.SetExcluded(gather.FieldActive)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *GatherUpsert) SetCreatedAt(v time.Time) *GatherUpsert {
	u.Set(gather.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GatherUpsert) UpdateCreatedAt() *GatherUpsert {
	u.SetExcluded(gather.FieldCreatedAt)
	return u
}

// SetClosedAt sets the "closed_at" field.
func (u *GatherUpsert) SetClosedAt(v time.Time) *GatherUpsert {
	u.Set(gather.FieldClosedAt, v)
	return u
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *GatherUpsert) UpdateClosedAt() *GatherUpsert {
	u.SetExcluded(gather.FieldClosedAt)
	return u
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *GatherUpsert) ClearClosedAt() *GatherUpsert {
	u.SetNull(gather.FieldClosedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Gather.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GatherUpsertOne) UpdateNewValues() *GatherUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Gather.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GatherUpsertOne) Ignore() *GatherUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GatherUpsertOne) DoNothing() *GatherUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GatherCreate.OnConflict
// documentation for more info.
func (u *GatherUpsertOne) Update(set func(*GatherUpsert)) *GatherUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GatherUpsert{UpdateSet: update})
	}))
	return u
}

// SetActive sets the "active" field.
func (u *GatherUpsertOne) SetActive(v bool) *GatherUpsertOne {
	return u.Update(func(s *GatherUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *GatherUpsertOne) UpdateActive() *GatherUpsertOne {
	return u.Update(func(s *GatherUpsert) {
		s.UpdateActive()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GatherUpsertOne) SetCreatedAt(v time.Time) *GatherUpsertOne {
	return u.Update(func(s *GatherUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GatherUpsertOne) UpdateCreatedAt() *GatherUpsertOne {
	return u.Update(func(s *GatherUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *GatherUpsertOne) SetClosedAt(v time.Time) *GatherUpsertOne {
	return u.Update(func(s *GatherUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *GatherUpsertOne) UpdateClosedAt() *GatherUpsertOne {
	return u.Update(func(s *GatherUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *GatherUpsertOne) ClearClosedAt() *GatherUpsertOne {
	return u.Update(func(s *GatherUpsert) {
		s.ClearClosedAt()
	})
}

// Exec executes the query.
func (u *GatherUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for GatherCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GatherUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GatherUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GatherUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GatherCreateBulk is the builder for creating many Gather entities in bulk.
type GatherCreateBulk struct {
	config
	err      error
	builders []*GatherCreate
	conflict []sql.ConflictOption
}

// Save creates the Gather entities in the database.
func (gcb *GatherCreateBulk) Save(ctx context.Context) ([]*Gather, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Gather, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GatherMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GatherCreateBulk) SaveX(ctx context.Context) []*Gather {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GatherCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GatherCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Gather.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GatherUpsert) {
//			SetActive(v+v).
//		}).
//		Exec(ctx)
func (gcb *GatherCreateBulk) OnConflict(opts ...sql.ConflictOption) *GatherUpsertBulk {
	gcb.conflict = opts
	return &GatherUpsertBulk{
		create: gcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Gather.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gcb *GatherCreateBulk) OnConflictColumns(columns ...string) *GatherUpsertBulk {
	gcb.conflict = append(gcb.conflict, sql.ConflictColumns(columns...))
	return &GatherUpsertBulk{
		create: gcb,
	}
}

// GatherUpsertBulk is the builder for "upsert"-ing
// a bulk of Gather nodes.
type GatherUpsertBulk struct {
	create *GatherCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Gather.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GatherUpsertBulk) UpdateNewValues() *GatherUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Gather.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GatherUpsertBulk) Ignore() *GatherUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GatherUpsertBulk) DoNothing() *GatherUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GatherCreateBulk.OnConflict
// documentation for more info.
func (u *GatherUpsertBulk) Update(set func(*GatherUpsert)) *GatherUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GatherUpsert{UpdateSet: update})
	}))
	return u
}

// SetActive sets the "active" field.
func (u *GatherUpsertBulk) SetActive(v bool) *GatherUpsertBulk {
	return u.Update(func(s *GatherUpsert) {
		s.SetActive(v)
	})
}

// UpdateActive sets the "active" field to the value that was provided on create.
func (u *GatherUpsertBulk) UpdateActive() *GatherUpsertBulk {
	return u.Update(func(s *GatherUpsert) {
		s.UpdateActive()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *GatherUpsertBulk) SetCreatedAt(v time.Time) *GatherUpsertBulk {
	return u.Update(func(s *GatherUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *GatherUpsertBulk) UpdateCreatedAt() *GatherUpsertBulk {
	return u.Update(func(s *GatherUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetClosedAt sets the "closed_at" field.
func (u *GatherUpsertBulk) SetClosedAt(v time.Time) *GatherUpsertBulk {
	return u.Update(func(s *GatherUpsert) {
		s.SetClosedAt(v)
	})
}

// UpdateClosedAt sets the "closed_at" field to the value that was provided on create.
func (u *GatherUpsertBulk) UpdateClosedAt() *GatherUpsertBulk {
	return u.Update(func(s *GatherUpsert) {
		s.UpdateClosedAt()
	})
}

// ClearClosedAt clears the value of the "closed_at" field.
func (u *GatherUpsertBulk) ClearClosedAt() *GatherUpsertBulk {
	return u.Update(func(s *GatherUpsert) {
		s.ClearClosedAt()
	})
}

// Exec executes the query.
func (u *GatherUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the GatherCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for GatherCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GatherUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
