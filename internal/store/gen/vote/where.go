// Code generated by ent, DO NOT EDIT.

package vote

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vovanwin/meetingsBot/internal/store/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vote {
	return predicate.Vote(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vote {
	return predicate.Vote(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vote {
	return predicate.Vote(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vote {
	return predicate.Vote(sql.FieldLTE(FieldID, id))
}

// Count applies equality check predicate on the "count" field. It's identical to CountEQ.
func Count(v int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldCount, v))
}

// VotedAt applies equality check predicate on the "voted_at" field. It's identical to VotedAtEQ.
func VotedAt(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldVotedAt, v))
}

// CountEQ applies the EQ predicate on the "count" field.
func CountEQ(v int) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldCount, v))
}

// CountNEQ applies the NEQ predicate on the "count" field.
func CountNEQ(v int) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldCount, v))
}

// CountIn applies the In predicate on the "count" field.
func CountIn(vs ...int) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldCount, vs...))
}

// CountNotIn applies the NotIn predicate on the "count" field.
func CountNotIn(vs ...int) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldCount, vs...))
}

// CountGT applies the GT predicate on the "count" field.
func CountGT(v int) predicate.Vote {
	return predicate.Vote(sql.FieldGT(FieldCount, v))
}

// CountGTE applies the GTE predicate on the "count" field.
func CountGTE(v int) predicate.Vote {
	return predicate.Vote(sql.FieldGTE(FieldCount, v))
}

// CountLT applies the LT predicate on the "count" field.
func CountLT(v int) predicate.Vote {
	return predicate.Vote(sql.FieldLT(FieldCount, v))
}

// CountLTE applies the LTE predicate on the "count" field.
func CountLTE(v int) predicate.Vote {
	return predicate.Vote(sql.FieldLTE(FieldCount, v))
}

// VotedAtEQ applies the EQ predicate on the "voted_at" field.
func VotedAtEQ(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldEQ(FieldVotedAt, v))
}

// VotedAtNEQ applies the NEQ predicate on the "voted_at" field.
func VotedAtNEQ(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldNEQ(FieldVotedAt, v))
}

// VotedAtIn applies the In predicate on the "voted_at" field.
func VotedAtIn(vs ...time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldIn(FieldVotedAt, vs...))
}

// VotedAtNotIn applies the NotIn predicate on the "voted_at" field.
func VotedAtNotIn(vs ...time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldNotIn(FieldVotedAt, vs...))
}

// VotedAtGT applies the GT predicate on the "voted_at" field.
func VotedAtGT(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldGT(FieldVotedAt, v))
}

// VotedAtGTE applies the GTE predicate on the "voted_at" field.
func VotedAtGTE(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldGTE(FieldVotedAt, v))
}

// VotedAtLT applies the LT predicate on the "voted_at" field.
func VotedAtLT(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldLT(FieldVotedAt, v))
}

// VotedAtLTE applies the LTE predicate on the "voted_at" field.
func VotedAtLTE(v time.Time) predicate.Vote {
	return predicate.Vote(sql.FieldLTE(FieldVotedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGather applies the HasEdge predicate on the "gather" edge.
func HasGather() predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GatherTable, GatherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGatherWith applies the HasEdge predicate on the "gather" edge with a given conditions (other predicates).
func HasGatherWith(preds ...predicate.Gather) predicate.Vote {
	return predicate.Vote(func(s *sql.Selector) {
		step := newGatherStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vote) predicate.Vote {
	return predicate.Vote(sql.NotPredicates(p))
}
