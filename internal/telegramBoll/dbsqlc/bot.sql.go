// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bot.sql

package dbsqlc

import (
	"context"
	"database/sql"
	"time"
)

const createChat = `-- name: CreateChat :one
INSERT INTO chats (id, title, is_meeting, is_antibot)
VALUES (?, ?, ?, ?)
RETURNING id, title, is_meeting, is_antibot
`

type CreateChatParams struct {
	ID        int64  `json:"id"`
	Title     string `json:"title"`
	IsMeeting bool   `json:"is_meeting"`
	IsAntibot bool   `json:"is_antibot"`
}

type CreateChatRow struct {
	ID        int64  `json:"id"`
	Title     string `json:"title"`
	IsMeeting bool   `json:"is_meeting"`
	IsAntibot bool   `json:"is_antibot"`
}

func (q *Queries) CreateChat(ctx context.Context, arg CreateChatParams) (CreateChatRow, error) {
	row := q.db.QueryRowContext(ctx, createChat,
		arg.ID,
		arg.Title,
		arg.IsMeeting,
		arg.IsAntibot,
	)
	var i CreateChatRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsMeeting,
		&i.IsAntibot,
	)
	return i, err
}

const createChatMeeting = `-- name: CreateChatMeeting :one
INSERT INTO chat_meetings (chat_id, meeting_id, message_id)
VALUES (?, ?, ?)
RETURNING chat_id, meeting_id, message_id
`

type CreateChatMeetingParams struct {
	ChatID    int64 `json:"chat_id"`
	MeetingID int64 `json:"meeting_id"`
	MessageID int64 `json:"message_id"`
}

func (q *Queries) CreateChatMeeting(ctx context.Context, arg CreateChatMeetingParams) (ChatMeeting, error) {
	row := q.db.QueryRowContext(ctx, createChatMeeting, arg.ChatID, arg.MeetingID, arg.MessageID)
	var i ChatMeeting
	err := row.Scan(&i.ChatID, &i.MeetingID, &i.MessageID)
	return i, err
}

const createMeeting = `-- name: CreateMeeting :one
INSERT INTO meetings
    (max, cost, message, owner_id, type_pay, status, code)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, max, cost, message, owner_id, type_pay, status, code
`

type CreateMeetingParams struct {
	Max     sql.NullInt64  `json:"max"`
	Cost    sql.NullInt64  `json:"cost"`
	Message sql.NullString `json:"message"`
	OwnerID int64          `json:"owner_id"`
	TypePay string         `json:"type_pay"`
	Status  string         `json:"status"`
	Code    string         `json:"code"`
}

type CreateMeetingRow struct {
	ID      int64          `json:"id"`
	Max     sql.NullInt64  `json:"max"`
	Cost    sql.NullInt64  `json:"cost"`
	Message sql.NullString `json:"message"`
	OwnerID int64          `json:"owner_id"`
	TypePay string         `json:"type_pay"`
	Status  string         `json:"status"`
	Code    string         `json:"code"`
}

func (q *Queries) CreateMeeting(ctx context.Context, arg CreateMeetingParams) (CreateMeetingRow, error) {
	row := q.db.QueryRowContext(ctx, createMeeting,
		arg.Max,
		arg.Cost,
		arg.Message,
		arg.OwnerID,
		arg.TypePay,
		arg.Status,
		arg.Code,
	)
	var i CreateMeetingRow
	err := row.Scan(
		&i.ID,
		&i.Max,
		&i.Cost,
		&i.Message,
		&i.OwnerID,
		&i.TypePay,
		&i.Status,
		&i.Code,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, is_owner, nickname)
VALUES (?, ?, ?, ?)
RETURNING id, username, is_owner,nickname
`

type CreateUserParams struct {
	ID       int64          `json:"id"`
	Username string         `json:"username"`
	IsOwner  bool           `json:"is_owner"`
	Nickname sql.NullString `json:"nickname"`
}

type CreateUserRow struct {
	ID       int64          `json:"id"`
	Username string         `json:"username"`
	IsOwner  bool           `json:"is_owner"`
	Nickname sql.NullString `json:"nickname"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.IsOwner,
		arg.Nickname,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsOwner,
		&i.Nickname,
	)
	return i, err
}

const createUserMeeting = `-- name: CreateUserMeeting :one
INSERT INTO user_meetings (user_id, meeting_id, status, count)
VALUES (?, ?, ?, ?)
RETURNING user_id, meeting_id, status, count
`

type CreateUserMeetingParams struct {
	UserID    int64         `json:"user_id"`
	MeetingID int64         `json:"meeting_id"`
	Status    string        `json:"status"`
	Count     sql.NullInt64 `json:"count"`
}

type CreateUserMeetingRow struct {
	UserID    int64         `json:"user_id"`
	MeetingID int64         `json:"meeting_id"`
	Status    string        `json:"status"`
	Count     sql.NullInt64 `json:"count"`
}

func (q *Queries) CreateUserMeeting(ctx context.Context, arg CreateUserMeetingParams) (CreateUserMeetingRow, error) {
	row := q.db.QueryRowContext(ctx, createUserMeeting,
		arg.UserID,
		arg.MeetingID,
		arg.Status,
		arg.Count,
	)
	var i CreateUserMeetingRow
	err := row.Scan(
		&i.UserID,
		&i.MeetingID,
		&i.Status,
		&i.Count,
	)
	return i, err
}

const getChat = `-- name: GetChat :one
SELECT id, title, is_meeting, is_antibot
FROM chats
WHERE id = ?
`

type GetChatRow struct {
	ID        int64  `json:"id"`
	Title     string `json:"title"`
	IsMeeting bool   `json:"is_meeting"`
	IsAntibot bool   `json:"is_antibot"`
}

func (q *Queries) GetChat(ctx context.Context, id int64) (GetChatRow, error) {
	row := q.db.QueryRowContext(ctx, getChat, id)
	var i GetChatRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsMeeting,
		&i.IsAntibot,
	)
	return i, err
}

const getChatMeeting = `-- name: GetChatMeeting :one
SELECT chat_id, meeting_id, message_id
FROM chat_meetings
WHERE chat_id = ?
  AND meeting_id = ?
`

type GetChatMeetingParams struct {
	ChatID    int64 `json:"chat_id"`
	MeetingID int64 `json:"meeting_id"`
}

func (q *Queries) GetChatMeeting(ctx context.Context, arg GetChatMeetingParams) (ChatMeeting, error) {
	row := q.db.QueryRowContext(ctx, getChatMeeting, arg.ChatID, arg.MeetingID)
	var i ChatMeeting
	err := row.Scan(&i.ChatID, &i.MeetingID, &i.MessageID)
	return i, err
}

const getChatMeetingAllChatWithMeeting = `-- name: GetChatMeetingAllChatWithMeeting :many
SELECT chat_id, meeting_id, message_id
FROM chat_meetings
WHERE meeting_id = ?
`

func (q *Queries) GetChatMeetingAllChatWithMeeting(ctx context.Context, meetingID int64) ([]ChatMeeting, error) {
	rows, err := q.db.QueryContext(ctx, getChatMeetingAllChatWithMeeting, meetingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChatMeeting
	for rows.Next() {
		var i ChatMeeting
		if err := rows.Scan(&i.ChatID, &i.MeetingID, &i.MessageID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMeeting = `-- name: GetMeeting :one
SELECT id,
       max,
       cost,
       message,
       owner_id,
       type_pay,
       status,
       code
FROM meetings
WHERE id = ?
`

type GetMeetingRow struct {
	ID      int64          `json:"id"`
	Max     sql.NullInt64  `json:"max"`
	Cost    sql.NullInt64  `json:"cost"`
	Message sql.NullString `json:"message"`
	OwnerID int64          `json:"owner_id"`
	TypePay string         `json:"type_pay"`
	Status  string         `json:"status"`
	Code    string         `json:"code"`
}

func (q *Queries) GetMeeting(ctx context.Context, id int64) (GetMeetingRow, error) {
	row := q.db.QueryRowContext(ctx, getMeeting, id)
	var i GetMeetingRow
	err := row.Scan(
		&i.ID,
		&i.Max,
		&i.Cost,
		&i.Message,
		&i.OwnerID,
		&i.TypePay,
		&i.Status,
		&i.Code,
	)
	return i, err
}

const getMeetingByCode = `-- name: GetMeetingByCode :one
SELECT id,
       max,
       cost,
       message,
       owner_id,
       type_pay,
       status,
       code
FROM meetings
WHERE code = ?
`

type GetMeetingByCodeRow struct {
	ID      int64          `json:"id"`
	Max     sql.NullInt64  `json:"max"`
	Cost    sql.NullInt64  `json:"cost"`
	Message sql.NullString `json:"message"`
	OwnerID int64          `json:"owner_id"`
	TypePay string         `json:"type_pay"`
	Status  string         `json:"status"`
	Code    string         `json:"code"`
}

func (q *Queries) GetMeetingByCode(ctx context.Context, code string) (GetMeetingByCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getMeetingByCode, code)
	var i GetMeetingByCodeRow
	err := row.Scan(
		&i.ID,
		&i.Max,
		&i.Cost,
		&i.Message,
		&i.OwnerID,
		&i.TypePay,
		&i.Status,
		&i.Code,
	)
	return i, err
}

const getMeetingsForUpdateTime = `-- name: GetMeetingsForUpdateTime :many
SELECT m.id, m.code,
       m.status, m.published_at,
       m.closed_at, m.updated_at,
       m.message, m.max, m.cost,
       m.type_pay, m.owner_id, cm.chat_id,
       cm.meeting_id, cm.message_id,
       c.is_private,
       u.is_owner
FROM meetings m
join main.chat_meetings cm on m.id = cm.meeting_id
join main.users u on u.id = m.owner_id
join main.chats c on c.id = cm.chat_id
WHERE closed_at IS NULL
  AND updated_at <= datetime('now', '-2 day')
`

type GetMeetingsForUpdateTimeRow struct {
	ID          int64          `json:"id"`
	Code        string         `json:"code"`
	Status      string         `json:"status"`
	PublishedAt sql.NullTime   `json:"published_at"`
	ClosedAt    sql.NullTime   `json:"closed_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	Message     sql.NullString `json:"message"`
	Max         sql.NullInt64  `json:"max"`
	Cost        sql.NullInt64  `json:"cost"`
	TypePay     string         `json:"type_pay"`
	OwnerID     int64          `json:"owner_id"`
	ChatID      int64          `json:"chat_id"`
	MeetingID   int64          `json:"meeting_id"`
	MessageID   int64          `json:"message_id"`
	IsPrivate   bool           `json:"is_private"`
	IsOwner     bool           `json:"is_owner"`
}

func (q *Queries) GetMeetingsForUpdateTime(ctx context.Context) ([]GetMeetingsForUpdateTimeRow, error) {
	rows, err := q.db.QueryContext(ctx, getMeetingsForUpdateTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMeetingsForUpdateTimeRow
	for rows.Next() {
		var i GetMeetingsForUpdateTimeRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Status,
			&i.PublishedAt,
			&i.ClosedAt,
			&i.UpdatedAt,
			&i.Message,
			&i.Max,
			&i.Cost,
			&i.TypePay,
			&i.OwnerID,
			&i.ChatID,
			&i.MeetingID,
			&i.MessageID,
			&i.IsPrivate,
			&i.IsOwner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMeetingsWithStatus = `-- name: GetMeetingsWithStatus :many
SELECT code
FROM meetings
WHERE status = ?
`

func (q *Queries) GetMeetingsWithStatus(ctx context.Context, status string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getMeetingsWithStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, is_owner,nickname
FROM users
WHERE id = ?
`

type GetUserRow struct {
	ID       int64          `json:"id"`
	Username string         `json:"username"`
	IsOwner  bool           `json:"is_owner"`
	Nickname sql.NullString `json:"nickname"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.IsOwner,
		&i.Nickname,
	)
	return i, err
}

const getUserMeeting = `-- name: GetUserMeeting :one
SELECT user_id, meeting_id, status, count
FROM user_meetings
WHERE user_id = ?
  AND meeting_id = ?
`

type GetUserMeetingParams struct {
	UserID    int64 `json:"user_id"`
	MeetingID int64 `json:"meeting_id"`
}

type GetUserMeetingRow struct {
	UserID    int64         `json:"user_id"`
	MeetingID int64         `json:"meeting_id"`
	Status    string        `json:"status"`
	Count     sql.NullInt64 `json:"count"`
}

func (q *Queries) GetUserMeeting(ctx context.Context, arg GetUserMeetingParams) (GetUserMeetingRow, error) {
	row := q.db.QueryRowContext(ctx, getUserMeeting, arg.UserID, arg.MeetingID)
	var i GetUserMeetingRow
	err := row.Scan(
		&i.UserID,
		&i.MeetingID,
		&i.Status,
		&i.Count,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, is_owner,nickname
FROM users
ORDER BY id
`

type GetUsersRow struct {
	ID       int64          `json:"id"`
	Username string         `json:"username"`
	IsOwner  bool           `json:"is_owner"`
	Nickname sql.NullString `json:"nickname"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.IsOwner,
			&i.Nickname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersMeetings = `-- name: GetUsersMeetings :many
SELECT um.user_id,
       um.meeting_id,
       um.status,
       um.count,
       u.username,
       u.nickname,
       u.is_owner
FROM user_meetings um
         JOIN users u ON u.id = um.user_id
WHERE um.meeting_id = ?
ORDER BY um.user_id
`

type GetUsersMeetingsRow struct {
	UserID    int64          `json:"user_id"`
	MeetingID int64          `json:"meeting_id"`
	Status    string         `json:"status"`
	Count     sql.NullInt64  `json:"count"`
	Username  string         `json:"username"`
	Nickname  sql.NullString `json:"nickname"`
	IsOwner   bool           `json:"is_owner"`
}

func (q *Queries) GetUsersMeetings(ctx context.Context, meetingID int64) ([]GetUsersMeetingsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersMeetings, meetingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersMeetingsRow
	for rows.Next() {
		var i GetUsersMeetingsRow
		if err := rows.Scan(
			&i.UserID,
			&i.MeetingID,
			&i.Status,
			&i.Count,
			&i.Username,
			&i.Nickname,
			&i.IsOwner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChatMeeting = `-- name: UpdateChatMeeting :one
UPDATE chat_meetings
SET message_id=COALESCE(?1, message_id)
WHERE meeting_id = ?2
  and chat_id = ?3
RETURNING chat_id, meeting_id, message_id
`

type UpdateChatMeetingParams struct {
	MessageID      int64 `json:"message_id"`
	WhereMeetingID int64 `json:"where_meeting_id"`
	WhereChatID    int64 `json:"where_chat_id"`
}

func (q *Queries) UpdateChatMeeting(ctx context.Context, arg UpdateChatMeetingParams) (ChatMeeting, error) {
	row := q.db.QueryRowContext(ctx, updateChatMeeting, arg.MessageID, arg.WhereMeetingID, arg.WhereChatID)
	var i ChatMeeting
	err := row.Scan(&i.ChatID, &i.MeetingID, &i.MessageID)
	return i, err
}

const updateMeetingStatus = `-- name: UpdateMeetingStatus :exec
UPDATE meetings
SET status = ?
WHERE code = ?
`

type UpdateMeetingStatusParams struct {
	Status string `json:"status"`
	Code   string `json:"code"`
}

func (q *Queries) UpdateMeetingStatus(ctx context.Context, arg UpdateMeetingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateMeetingStatus, arg.Status, arg.Code)
	return err
}

const updateMeetingUpdate = `-- name: UpdateMeetingUpdate :exec
UPDATE meetings
SET updated_at = ?
WHERE id = ?
`

type UpdateMeetingUpdateParams struct {
	UpdatedAt      time.Time `json:"updated_at"`
	WhereMeetingID int64     `json:"where_meeting_id"`
}

func (q *Queries) UpdateMeetingUpdate(ctx context.Context, arg UpdateMeetingUpdateParams) error {
	_, err := q.db.ExecContext(ctx, updateMeetingUpdate, arg.UpdatedAt, arg.WhereMeetingID)
	return err
}

const updateUserMeetingCount = `-- name: UpdateUserMeetingCount :exec
UPDATE user_meetings
SET count = ?
WHERE user_id = ?
  AND meeting_id = ?
`

type UpdateUserMeetingCountParams struct {
	Count     sql.NullInt64 `json:"count"`
	UserID    int64         `json:"user_id"`
	MeetingID int64         `json:"meeting_id"`
}

func (q *Queries) UpdateUserMeetingCount(ctx context.Context, arg UpdateUserMeetingCountParams) error {
	_, err := q.db.ExecContext(ctx, updateUserMeetingCount, arg.Count, arg.UserID, arg.MeetingID)
	return err
}

const updateUserMeetingStatus = `-- name: UpdateUserMeetingStatus :exec
UPDATE user_meetings
SET status = ?
WHERE user_id = ?
  AND meeting_id = ?
`

type UpdateUserMeetingStatusParams struct {
	Status    string `json:"status"`
	UserID    int64  `json:"user_id"`
	MeetingID int64  `json:"meeting_id"`
}

func (q *Queries) UpdateUserMeetingStatus(ctx context.Context, arg UpdateUserMeetingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserMeetingStatus, arg.Status, arg.UserID, arg.MeetingID)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE users
SET username = ?
WHERE id = ?
`

type UpdateUsernameParams struct {
	Username string `json:"username"`
	ID       int64  `json:"id"`
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUsername, arg.Username, arg.ID)
	return err
}
