// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package dto

import (
	"fmt"
	"strings"
)

const (
	// StatusMeetingАктивная is a StatusMeeting of type Активная.
	StatusMeetingАктивная StatusMeeting = "Активная"
	// StatusMeetingОтменена is a StatusMeeting of type Отменена.
	StatusMeetingОтменена StatusMeeting = "Отменена"
	// StatusMeetingЗакончена is a StatusMeeting of type Закончена.
	StatusMeetingЗакончена StatusMeeting = "Закончена"
	// StatusMeetingЧерновик is a StatusMeeting of type Черновик.
	StatusMeetingЧерновик StatusMeeting = "Черновик"
)

var ErrInvalidStatusMeeting = fmt.Errorf("not a valid StatusMeeting, try [%s]", strings.Join(_StatusMeetingNames, ", "))

var _StatusMeetingNames = []string{
	string(StatusMeetingАктивная),
	string(StatusMeetingОтменена),
	string(StatusMeetingЗакончена),
	string(StatusMeetingЧерновик),
}

// StatusMeetingNames returns a list of possible string values of StatusMeeting.
func StatusMeetingNames() []string {
	tmp := make([]string, len(_StatusMeetingNames))
	copy(tmp, _StatusMeetingNames)
	return tmp
}

// String implements the Stringer interface.
func (x StatusMeeting) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x StatusMeeting) IsValid() bool {
	_, err := ParseStatusMeeting(string(x))
	return err == nil
}

var _StatusMeetingValue = map[string]StatusMeeting{
	"Активная":  StatusMeetingАктивная,
	"Отменена":  StatusMeetingОтменена,
	"Закончена": StatusMeetingЗакончена,
	"Черновик":  StatusMeetingЧерновик,
}

// ParseStatusMeeting attempts to convert a string to a StatusMeeting.
func ParseStatusMeeting(name string) (StatusMeeting, error) {
	if x, ok := _StatusMeetingValue[name]; ok {
		return x, nil
	}
	return StatusMeeting(""), fmt.Errorf("%s is %w", name, ErrInvalidStatusMeeting)
}

const (
	// TypePayФиксированная is a TypePay of type Фиксированная.
	TypePayФиксированная TypePay = "Фиксированная"
	// TypePayПоровну is a TypePay of type Поровну.
	TypePayПоровну TypePay = "Поровну"
	// TypePayБесплатно is a TypePay of type Бесплатно.
	TypePayБесплатно TypePay = "Бесплатно"
)

var ErrInvalidTypePay = fmt.Errorf("not a valid TypePay, try [%s]", strings.Join(_TypePayNames, ", "))

var _TypePayNames = []string{
	string(TypePayФиксированная),
	string(TypePayПоровну),
	string(TypePayБесплатно),
}

// TypePayNames returns a list of possible string values of TypePay.
func TypePayNames() []string {
	tmp := make([]string, len(_TypePayNames))
	copy(tmp, _TypePayNames)
	return tmp
}

// String implements the Stringer interface.
func (x TypePay) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TypePay) IsValid() bool {
	_, err := ParseTypePay(string(x))
	return err == nil
}

var _TypePayValue = map[string]TypePay{
	"Фиксированная": TypePayФиксированная,
	"Поровну":       TypePayПоровну,
	"Бесплатно":     TypePayБесплатно,
}

// ParseTypePay attempts to convert a string to a TypePay.
func ParseTypePay(name string) (TypePay, error) {
	if x, ok := _TypePayValue[name]; ok {
		return x, nil
	}
	return TypePay(""), fmt.Errorf("%s is %w", name, ErrInvalidTypePay)
}

const (
	// VoteStatusУчавствует is a VoteStatus of type Учавствует.
	VoteStatusУчавствует VoteStatus = "Учавствует"
	// VoteStatusНет is a VoteStatus of type Нет.
	VoteStatusНет VoteStatus = "Нет"
	// VoteStatusДумает is a VoteStatus of type Думает.
	VoteStatusДумает VoteStatus = "Думает"
)

var ErrInvalidVoteStatus = fmt.Errorf("not a valid VoteStatus, try [%s]", strings.Join(_VoteStatusNames, ", "))

var _VoteStatusNames = []string{
	string(VoteStatusУчавствует),
	string(VoteStatusНет),
	string(VoteStatusДумает),
}

// VoteStatusNames returns a list of possible string values of VoteStatus.
func VoteStatusNames() []string {
	tmp := make([]string, len(_VoteStatusNames))
	copy(tmp, _VoteStatusNames)
	return tmp
}

// String implements the Stringer interface.
func (x VoteStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x VoteStatus) IsValid() bool {
	_, err := ParseVoteStatus(string(x))
	return err == nil
}

var _VoteStatusValue = map[string]VoteStatus{
	"Учавствует": VoteStatusУчавствует,
	"Нет":        VoteStatusНет,
	"Думает":     VoteStatusДумает,
}

// ParseVoteStatus attempts to convert a string to a VoteStatus.
func ParseVoteStatus(name string) (VoteStatus, error) {
	if x, ok := _VoteStatusValue[name]; ok {
		return x, nil
	}
	return VoteStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidVoteStatus)
}
