# https://taskfile.dev
version: '3'

silent: true
env:
  POSTGRES_DB: "meetings"
  POSTGRES_USER: "default"
  POSTGRES_PASSWORD: "secret"
  POSTGRES_PORT: "5432"
  POSTGRES_VERSION: alpine
  POSTGRES_ENTRYPOINT_INITDB: ./postgres/docker-entrypoint-initdb.d
  DATA_PATH_HOST: ~/.laradock/data


  DB_DSN: "postgres://{{.POSTGRES_USER}}:{{.POSTGRES_PASSWORD}}@localhost:{{.POSTGRES_PORT}}/{{.POSTGRES_DB}}?sslmode=disable"

vars:
  DOCKER_COMPOSE_PATHS: |
    -f ./deploy/local/docker-compose.yml
  #    -f ./deployments/local/docker-compose.jasper.yml
  #    -f ./deployments/local/docker-compose.metrics.yml
  #    -f ./deployments/local/docker-compose.temporal.yml
  DOCKER_COMPOSE_CMD: docker compose  {{range $line := .DOCKER_COMPOSE_PATHS | splitLines -}}
    {{$line}}
    {{end}}

  DEV_TOOLS: |
    github.com/daixiang0/gci@v0.13.0
    mvdan.cc/gofumpt@v0.6.0
    github.com/kazhuravlev/options-gen/cmd/options-gen@latest
    go.uber.org/mock/mockgen@latest
    github.com/sqlc-dev/sqlc/cmd/sqlc@latest
    github.com/pressly/goose/v3/cmd/goose@latest

  GO_MODULE: github.com/vovanwin/meetingsBot
  GO_FILES:
    sh: find . -type f -name '*.go' -not -path "./vendor/*" -not -path "./internal/store/*" -not -path "*.gen.go" | tr "\n" " "

  GOLANGCI_LINT_VERSION: v1.56.2
  GOLANGCI_LINT_CACHE:
    sh: echo "$HOME/Library/Caches"

  TOOLS_DIR:
    sh: echo "$(pwd)/tools"

  CLI_ARGS: -f ./deployments/local/docker-compose.yml

  DB_DRIVER: postgres
  MIGRATIONS_DIR: ./migrations

tasks:
  default:
    cmds:
      - task: tidy
      - task: fmt
      - task: lint
      - task: tests
      - task: build
  list:
    desc: Вывести список команд
    cmds:
      - task -l

  tidy:
    - echo "- Tidy"
    - go mod tidy

  deps:
    desc: контейнеры - запустить
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} up -d {{.CLI_ARGS}}"

  deps:cmd:
    desc: контейнеры - выполнить cli комнду с аргументами
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.CLI_ARGS}}"   # пример: task deps:cmd -- exec postgres bash

  deps:status:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} ps -a"

  deps:logs:
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} logs {{.CLI_ARGS}}"

  deps:stop:
    desc: контейнеры - остановить
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} stop"

  deps:reset-psql:
    cmds:
      - task: deps:reset
        vars:
          SERVICES: postgres

  deps:reset:
    cmds:
      - for: { var: SERVICES }
        cmd: "{{.DOCKER_COMPOSE_CMD}} rm -fsv {{.ITEM}}"
      - for: { var: SERVICES }
        cmd: "{{.DOCKER_COMPOSE_CMD}} up -d {{.ITEM}}"


  fmt:
    - echo "- Format"
    - "{{.TOOLS_DIR}}/gofumpt -w {{.GO_FILES}}"
    - "{{.TOOLS_DIR}}/gci write {{.GO_FILES}} --custom-order -s standard -s default -s Prefix\\({{.GO_MODULE}}\\)"

  lint:
    cmds:
      - echo "- Lint"
      - task: lint:cmd
        vars: { CLI_ARGS: "run -v --fix --timeout=5m ./..." }

  lint:cmd:
    cmds:
      - |
        docker run --rm \
          -v "$(pwd):/app" -w /app \
          -v "{{.GOLANGCI_LINT_CACHE}}:/root/.cache" \
          golangci/golangci-lint:{{.GOLANGCI_LINT_VERSION}} \
          golangci-lint {{.CLI_ARGS}}

  build:
    cmds:
      - echo "- Build"
      - go build app

  generate:
    aliases: [ "gen" ]
    cmds:
      - task: gen:go
  sql:
    cmds:
      - echo "SQLC"
      - "{{.TOOLS_DIR}}/sqlc generate"
  gen:go:
    vars:
      #      PATH: {{.TOOLS_DIR}}:$PATH
      PATH: $PATH:{{.TOOLS_DIR}}
    cmds:
      - echo "Run go generate ./..."
      - 'PATH="{{.TOOLS_DIR}}:$PATH" go generate ./...'



  tests:
    desc: запустить тесты
    aliases: [ "tests:unit" ]
    cmds:
      - echo "- Tests"
      - cd app && go test -race ./... | grep -v '\[no test files\]'

  dev-tools:install:
    desc: установить tools инструменты для проекта
    cmds:
      - echo "- Install dev tools"
      - for: { var: DEV_TOOLS }
        cmd: GOBIN="{{.TOOLS_DIR}}"  go install "{{ .ITEM }}"

  run:
    dotenv: [ ".env" ]
    cmds:
      - echo "- Run"
      - cd app && go run main.go


  # Миграции
  migrate:init:
    desc: Инициализировать папку с миграциями
    cmds:
      - mkdir -p {{.MIGRATIONS_DIR}}
      - echo "Папка для миграций создана"

  migrate:create:
    desc: Создать новую миграцию
    cmds:
      - "{{.TOOLS_DIR}}/goose -dir {{.MIGRATIONS_DIR}} create {{.CLI_ARGS}} sql"

  migrate:up:
    desc: Применить все миграции
    cmds:
      - "{{.TOOLS_DIR}}/goose -dir {{.MIGRATIONS_DIR}} {{.DB_DRIVER}} '{{.DB_DSN}}' up"

  migrate:up-by-one:
    desc: Применить следующую миграцию
    cmds:
      - "{{.TOOLS_DIR}}/goose -dir {{.MIGRATIONS_DIR}} {{.DB_DRIVER}} '{{.DB_DSN}}' up-by-one"

  migrate:down:
    desc: Откатить последнюю миграцию
    cmds:
      - "{{.TOOLS_DIR}}/goose -dir {{.MIGRATIONS_DIR}} {{.DB_DRIVER}} '{{.DB_DSN}}' down"

  migrate:down-to:
    desc: Откатить миграции до указанной версии
    cmds:
      - "{{.TOOLS_DIR}}/goose -dir {{.MIGRATIONS_DIR}} {{.DB_DRIVER}} '{{.DB_DSN}}' down-to {{.CLI_ARGS}}"

  migrate:status:
    desc: Показать статус миграций
    cmds:
      - "{{.TOOLS_DIR}}/goose -dir {{.MIGRATIONS_DIR}} {{.DB_DRIVER}} '{{.DB_DSN}}' status"

  migrate:version:
    desc: Показать текущую версию миграции
    cmds:
      - "{{.TOOLS_DIR}}/goose -dir {{.MIGRATIONS_DIR}} {{.DB_DRIVER}} '{{.DB_DSN}}' version"